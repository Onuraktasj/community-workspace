package evrentan.community.eventmanager.entity;


import evrentan.community.eventmanager.dto.entity.Event;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * EventEntity Class represents the community table in the database.
 * It is represented by {@link Event} in DTO level.
 *
 * @author <a href="https://github.com/Onuraktasj">Onur Aktas</a>
 * @since 1.0.0
 */
@Entity
@Table(name = "event")
@Getter
@Setter
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@NoArgsConstructor
@EqualsAndHashCode
@ToString
@Builder
public class EventEntity {

    /**
     * Event ID in UUID Type.
     * It is equalized to the id column in the database.
     * It is the primary key of the table.
     * It is auto-generated by the database.
     * It is unique.
     * It is not nullable.
     *
     * @since 1.0.0
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private UUID id;

    /**
     * Event Name in String Type.
     * It is equalized to the name column in the database.
     *
     * @since 1.0.0
     */
    @Basic
    @Column(name = "name")
    private String name;

    /**
     * Event Description in String Type.
     * It is equalized to the description column in the database.
     *
     * @since 1.0.0
     */
    @Basic
    @Column(name = "description")
    private String description;

    /**
     * Indicates whether the event is active or not.
     * It is equalized to the is_active column in the database.
     *
     * @since 1.0.0
     */
    @Basic
    @Column(name = "is_active")
    private boolean isActive;

    /**
     * Event Date in LocalDateTime Type.
     * It is equalized to the event_date column in the database.
     *
     * @since 1.0.0
     */
    @Basic
    @Column(name = "event_date")
    private LocalDateTime eventDate;

    /**
     * Indicates whether the event is online or not.
     * It is equalized to the is_online column in the database.
     *
     * @since 1.0.0
     */
    @Basic
    @Column(name = "is_online")
    private boolean isOnline;

    /**
     * Event URL in String Type.
     * It is equalized to the url column in the database.
     *
     * @since 1.0.0
     */
    @Basic
    @Column(name = "event_url")
    private String url;

    /**
     * Indicates whether the event is free or not.
     * It is equalized to the is_free column in the database.
     *
     * @since 1.0.0
     */
    @Basic
    @Column(name = "is_free")
    private boolean isFree;

    /**
     * Event Fee in Double Type.
     * It is equalized to the event_fee column in the database.
     *
     * @since 1.0.0
     */
    @Basic
    @Column(name = "event_fee")
    private Double eventFee;

    /**
     * Event Fee Currency in String Type.
     * It is equalized to the event_fee_currency column in the database.
     *
     * @since 1.0.0
     */
    @Basic
    @Column(name = "event_fee_currency")
    private String eventFeeCurrency;

    /**
     * Event Participant Limit in Integer Type.
     * It is equalized to the participant_limit column in the database.
     *
     * @since 1.0.0
     */
    @Basic
    @Column(name = "participant_limit")
    private Integer participantLimit;
}
