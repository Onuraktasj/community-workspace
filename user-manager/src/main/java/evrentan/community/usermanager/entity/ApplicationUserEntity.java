package evrentan.community.usermanager.entity;

import evrentan.community.usermanager.dto.entity.ApplicationUser;
import jakarta.persistence.*;
import lombok.*;

import javax.validation.constraints.Pattern;
import java.util.UUID;

/**
 * Application User Entity Class represents the application_user table in the database.
 * It is represented by {@link ApplicationUser} in DTO level.
 *
 * @author <a href="https://github.com/evrentan">Evren Tan</a>
 * @since 1.0.0
 */
@Entity
@Table(name = "application_user")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@EqualsAndHashCode @ToString
@Builder
public class ApplicationUserEntity {

  /**
   * Application User ID in UUID Type. It is equalized to the id column in the database.
   * It is the primary key of the table.
   * It is auto-generated by the database.
   * It is unique.
   * It is not nullable.
   *
   * @since 1.0.0
   */
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  @Column(name = "id")
  private UUID id;

  /**
   * Application User Full Name in String Type.
   * It is equalized to the full_name column in the database.
   *
   * @since 1.0.0
   */
  @Basic
  @Column(name = "full_name")
  private String fullName;

  /**
   * Application User Email in String Type.
   * It is equalized to the surname column in the database.
   * It is unique.
   * It has a pattern of email.
   *
   * @since 1.0.0
   */
  @Basic
  @Column(name = "email")
  @Pattern(regexp = "^[a-zA-Z0-9_!#$%&â€™*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$")
  private String email;

  /**
   * Application User Twitter Account in String Type.
   * It is equalized to the twitter_account column in the database.
   *
   * @since 1.0.0
   */
  @Basic
  @Column(name = "twitter_account")
  private String twitterAccount;

  /**
   * Application User LinkedIn Account in String Type.
   * It is equalized to the linkedin_account column in the database.
   *
   * @since 1.0.0
   */
  @Basic
  @Column(name = "linkedin_account")
  private String linkedInAccount;

  /**
   * Application User GitHub Account in String Type.
   * It is equalized to the github_account column in the database.
   *
   * @since 1.0.0
   */
  @Basic
  @Column(name = "github_account")
  private String githubAccount;

  /**
   * Application User Website URL in String Type.
   * It is equalized to the website_url column in the database.
   *
   * @since 1.0.0
   */
  @Basic
  @Column(name = "website_url")
  private String websiteUrl;

  /**
   * Indicates whether the application user is active or not.
   * It is equalized to the is_active column in the database.
   *
   * @since 1.0.0
   */
  @Basic
  @Column(name = "is_active")
  private boolean active;
}
